name: deploy-eks

trigger: none

# resources:
#   repositories:
#   - repository: automate-all-the-things # The name used to reference this repository in the checkout step
#     type: github
#     endpoint: tferrari92 # Name of the service connection # AATT_GITHUB_USERNAME # This value was modified by the initial-setup python script
#     name: tferrari92/automate-all-the-things # AATT_GITHUB_USERNAME
  # This is for automatic triggering when specified pipeline is successful
  # pipelines:
  # - pipeline: deploy-backend # Any arbitrary name
  #   source: deploy-backend   # Name of the pipeline that needs to succeed for this pipeline to run
  #   # source: "AATT_GITHUB_USERNAME.automate-all-the-things (1)"   # Name of the pipeline that needs to succeed for this pipeline to run # AATT_GITHUB_USERNAME # This value was modified by the initial-setup python script
  #   trigger:
  #   branches:
  #     include:
  #       - main


pool:
  vmImage: 'ubuntu-latest' 
  # If you are using a self-hosted agent, comment out the previous line and uncomment the following three
  # name: <agent-pool-name> # Insert here the name of the agent pool you created
  # demands:
  #   - agent.name -equals <agent-name> # Insert here the name of the agent you created

steps:
- task: TerraformInstaller@0
  displayName: Install terraform
  inputs:
    terraformVersion: '1.4.6'

# - checkout: automate-all-the-things

- task: TerraformCLI@0
  displayName: 'Terraform init'
  inputs:
    command: init
    workingDirectory: './terraform/aws/'
    backendType: aws # set to `aws` to use aws backend
    backendServiceAws: aws # service connection name, required if backendType = aws
    providerServiceAws: 'aws' # This depends on the AWS Service Connection included with the AWS Toolkit. It uses a sevice connection created on the project called 'aws' so we dont't have to include the access_key and secret_key values.
    providerAwsRegion: us-east-2 # This value was modified by the initial-setup python script

- task: TerraformCLI@0
  displayName: 'Terraform plan'
  inputs:
    command: plan
    workingDirectory: './terraform/aws/'
    providerServiceAws: 'aws' # This depends on the AWS Service Connection included with the AWS Toolkit. It uses a sevice connection created on the project called 'aws' so we dont't have to include the access_key and secret_key values.
    providerAwsRegion: us-east-2 # This value was modified by the initial-setup python script

- task: TerraformCLI@0
  displayName: 'Terraform apply'
  inputs:
    command: apply
    workingDirectory: './terraform/aws/'
    providerServiceAws: 'aws' # This depends on the AWS Service Connection included with the AWS Toolkit. It uses a sevice connection created on the project called 'aws' so we dont't have to include the access_key and secret_key values.
    providerAwsRegion: us-east-2 # This value was modified by the initial-setup python script


# - script: terraform output -json > $(System.DefaultWorkingDirectory)/outputs.json
#   workingDirectory: './terraform/aws/'
#   displayName: 'Save outputs'



# - script: terraform output -raw kubeconfig > $(System.DefaultWorkingDirectory)/kubeconfig.yaml
#   workingDirectory: './terraform/aws/'
#   displayName: 'Save kubeconfig'
  

# - script: terraform output kubeconfig > $(System.DefaultWorkingDirectory)/kubeconfig2.yaml
#   workingDirectory: './terraform/aws/'
#   displayName: 'Save outputs'

# - script: |
#     cd $(System.DefaultWorkingDirectory)/python
#     ls
#     pwd
#   displayName: 'pwd'


# - task: PythonScript@0
#   displayName: 'Format kubeconfig'
#   inputs:
#     scriptSource: 'filePath'
#     scriptPath: 'python/azure-devops/00-format-kubeconfig.py'


# - script: |
#     echo "Structure of work folder of this pipeline:"
#     tree $(System.DefaultWorkingDirectory)
#   displayName: 'tree'


# # Save KubeConfig
# - task: PublishBuildArtifacts@1
#   displayName: 'Export kubeconfig'
#   inputs:
#     PathtoPublish: '$(System.DefaultWorkingDirectory)/kubeconfig.yaml'
#     # PathtoPublish: '$(Pipeline.Workspace)'
#     ArtifactName: 'KubeConfig'
#     publishLocation: 'Container'
#     # condition: always()

# # Save KubeConfig
# - task: PublishBuildArtifacts@1
#   displayName: 'Export kubeconfig'
#   inputs:
#     PathtoPublish: '$(System.DefaultWorkingDirectory)/kubeconfig.yaml'
#     # PathtoPublish: '$(Pipeline.Workspace)'
#     ArtifactName: 'Kubeconfig'
#     publishLocation: 'Container'
#     # condition: always()
